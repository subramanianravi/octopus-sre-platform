services:
  octopus-brain:
    build:
      context: .
      dockerfile: containers/brain/Dockerfile
    environment:
      - OCTOPUS_COMPONENT=brain
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://octopus:tentacles@postgres:5432/octopus_ocean
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      - redis
      - postgres
      - qdrant
    ports:
      - "8080:8080"
    volumes:
      - ./brain:/app/brain
    networks:
      - octopus_ocean
    restart: unless-stopped
    command: ["sh", "-c", "echo 'üß† Octopus Brain initializing...' && python -c 'import time; print(\"üß† Brain systems online!\"); print(\"üêô Tentacle coordination active\"); print(\"üìä Monitoring all ocean activities\"); [print(\"üß† Brain heartbeat - all systems operational\") or __import__(\"time\").sleep(30) for _ in iter(int, 1)]'"]

  detection-tentacles:
    build:
      context: .
      dockerfile: containers/tentacle/Dockerfile
    environment:
      - OCTOPUS_COMPONENT=tentacle
      - TENTACLE_TYPE=detection
      - BRAIN_URL=http://octopus-brain:8080
    depends_on:
      - octopus-brain
    networks:
      - octopus_ocean
    restart: unless-stopped
    command: ["sh", "-c", "echo 'üêô Detection Tentacle activating...' && python -c 'import time, random; print(\"üîç Detection tentacle online - scanning for anomalies\"); [print(f\"üîç Scanning systems... Intelligence: {random.randint(85, 98)}%\") or __import__(\"time\").sleep(15) for _ in iter(int, 1)]'"]

  response-tentacles:
    build:
      context: .
      dockerfile: containers/tentacle/Dockerfile
    environment:
      - TENTACLE_TYPE=response
      - BRAIN_URL=http://octopus-brain:8080
    depends_on:
      - octopus-brain
    networks:
      - octopus_ocean
    restart: unless-stopped
    command: ["sh", "-c", "echo 'üêô Response Tentacle activating...' && python -c 'import time, random; print(\"‚ö° Response tentacle ready - automated remediation active\"); [print(f\"‚ö° Ready to respond - {random.randint(3, 12)} remediation actions available\") or __import__(\"time\").sleep(20) for _ in iter(int, 1)]'"]

  octopus-dashboard:
    build:
      context: ./dashboard
    ports:
      - "3333:3000"
    environment:
      - REACT_APP_BRAIN_URL=http://localhost:8080
    depends_on:
      - octopus-brain
    networks:
      - octopus_ocean
    restart: unless-stopped

  # SIMPLIFIED KAFKA - Just use environment variables for KRaft
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - octopus_ocean
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - octopus_ocean
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: octopus_ocean
      POSTGRES_USER: octopus
      POSTGRES_PASSWORD: tentacles
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - octopus_ocean
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - octopus_ocean
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - octopus_ocean
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=octopus
    networks:
      - octopus_ocean
    restart: unless-stopped

volumes:
  postgres_data:
  qdrant_data:

networks:
  octopus_ocean:
    driver: bridge
