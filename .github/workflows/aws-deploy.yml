name: AWS Deployment Pipeline

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
  
  # Automatic trigger on push to master
  push:
    branches: [ master ]
  
  # Trigger on pull request
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_MAIN: octopus-sre-platform
  ECR_REPOSITORY_DASHBOARD: octopus-dashboard

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Main Application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      run: |
        # Build and push main Python application from root directory
        docker build -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG .
        docker build -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:latest
        
        echo "Main app image pushed to: $ECR_REGISTRY/$ECR_REPOSITORY_MAIN:$IMAGE_TAG"

    - name: Build and push Dashboard
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      run: |
        # Build and push dashboard
        cd dashboard
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DASHBOARD:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DASHBOARD:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DASHBOARD:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DASHBOARD:latest
        
        echo "Dashboard image pushed to: $ECR_REGISTRY/$ECR_REPOSITORY_DASHBOARD:$IMAGE_TAG"

    - name: Update Parameter Store
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      run: |
        # Update deployment info for main application
        aws ssm put-parameter \
          --name "/$ENVIRONMENT/octopus/main-app/image-tag" \
          --value "${{ github.sha }}" \
          --type "String" \
          --overwrite
        
        # Update deployment info for dashboard
        aws ssm put-parameter \
          --name "/$ENVIRONMENT/octopus/dashboard/image-tag" \
          --value "${{ github.sha }}" \
          --type "String" \
          --overwrite
        
        aws ssm put-parameter \
          --name "/$ENVIRONMENT/octopus/deployment/timestamp" \
          --value "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --type "String" \
          --overwrite

    - name: Deploy to ECS (if using ECS)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      run: |
        # If you're using ECS, update the service
        # Uncomment and modify as needed:
        
        # aws ecs update-service \
        #   --cluster octopus-$ENVIRONMENT \
        #   --service octopus-service \
        #   --force-new-deployment

    - name: Deploy with Docker Compose (Alternative)
      if: ${{ github.event.inputs.environment == 'development' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Alternative: Deploy using Docker Compose
        echo "ECR_REGISTRY=$ECR_REGISTRY" > .env.deploy
        echo "IMAGE_TAG=$IMAGE_TAG" >> .env.deploy
        
        # If you have a docker-compose.prod.yml:
        # docker-compose -f docker-compose.prod.yml --env-file .env.deploy up -d

    - name: Slack Notification (Optional)
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        STATUS: ${{ job.status }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
      run: |
        if [ "$SLACK_WEBHOOK" != "" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸš€ Octopus deployment to $ENVIRONMENT: $STATUS\"}" \
            $SLACK_WEBHOOK
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Python tests
      run: |
        if [ -d tests ]; then
          python -m pytest tests/ -v
        fi

    - name: Set up Node.js for Dashboard
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Install Dashboard dependencies
      run: |
        cd dashboard
        npm ci

    - name: Run Dashboard tests
      run: |
        cd dashboard
        if npm run test --if-present; then
          echo "Dashboard tests passed"
        else
          echo "No dashboard tests found or tests failed"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
